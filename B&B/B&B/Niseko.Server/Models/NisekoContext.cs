// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Niseko.Server.Models;

public partial class NisekoContext : DbContext
{
    public NisekoContext()
    {
    }

    public NisekoContext(DbContextOptions<NisekoContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TAuditLog> TAuditLogs { get; set; }

    public virtual DbSet<TCoach> TCoaches { get; set; }

    public virtual DbSet<TCoachLevel> TCoachLevels { get; set; }

    public virtual DbSet<TCoachPrice> TCoachPrices { get; set; }

    public virtual DbSet<TCoupon> TCoupons { get; set; }

    public virtual DbSet<TDepartment> TDepartments { get; set; }

    public virtual DbSet<TEmployee> TEmployees { get; set; }

    public virtual DbSet<TEmployeeLoginRecord> TEmployeeLoginRecords { get; set; }

    public virtual DbSet<TLocation> TLocations { get; set; }

    public virtual DbSet<TMember> TMembers { get; set; }

    public virtual DbSet<TMemberLoginRecord> TMemberLoginRecords { get; set; }

    public virtual DbSet<TMemberLoginType> TMemberLoginTypes { get; set; }

    public virtual DbSet<TMemberNon> TMemberNons { get; set; }

    public virtual DbSet<TMemberReview> TMemberReviews { get; set; }

    public virtual DbSet<TMemberShoppingCart> TMemberShoppingCarts { get; set; }

    public virtual DbSet<TMemberShoppingCartCourse> TMemberShoppingCartCourses { get; set; }

    public virtual DbSet<TMemberShoppingCartHomestay> TMemberShoppingCartHomestays { get; set; }

    public virtual DbSet<TMemberSkiLevel> TMemberSkiLevels { get; set; }

    public virtual DbSet<TMemberThirdPartyAccount> TMemberThirdPartyAccounts { get; set; }

    public virtual DbSet<TMemberWebsiteAccount> TMemberWebsiteAccounts { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderDetail> TOrderDetails { get; set; }

    public virtual DbSet<TOrderDetailCourse> TOrderDetailCourses { get; set; }

    public virtual DbSet<TOrderDetailHomestay> TOrderDetailHomestays { get; set; }

    public virtual DbSet<TOrderPaymentMethod> TOrderPaymentMethods { get; set; }

    public virtual DbSet<TOrderPaymentRecord> TOrderPaymentRecords { get; set; }

    public virtual DbSet<TOrderPaymentStatus> TOrderPaymentStatuses { get; set; }

    public virtual DbSet<TProductCourse> TProductCourses { get; set; }

    public virtual DbSet<TProductCoursePrice> TProductCoursePrices { get; set; }

    public virtual DbSet<TProductEquipment> TProductEquipments { get; set; }

    public virtual DbSet<TProductEquipmentCategory> TProductEquipmentCategories { get; set; }

    public virtual DbSet<TProductEvent> TProductEvents { get; set; }

    public virtual DbSet<TProductHomestay> TProductHomestays { get; set; }

    public virtual DbSet<TProductHomestayPrice> TProductHomestayPrices { get; set; }

    public virtual DbSet<TProductHomestayRoom> TProductHomestayRooms { get; set; }

    public virtual DbSet<TProductImage> TProductImages { get; set; }

    public virtual DbSet<TProductShuttle> TProductShuttles { get; set; }

    public virtual DbSet<TProductShuttlePrice> TProductShuttlePrices { get; set; }

    public virtual DbSet<TProductStorage> TProductStorages { get; set; }

    public virtual DbSet<TProductTagMapping> TProductTagMappings { get; set; }

    public virtual DbSet<TTag> TTags { get; set; }

    public virtual DbSet<TTagType> TTagTypes { get; set; }

    public virtual DbSet<TVendor> TVendors { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=台南SERVER\\YIFEI;Initial Catalog=Niseko;User ID=YIFEI2;Password=YIFEI2123;Connect Timeout=30");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TAuditLog>(entity =>
        {
            entity.HasKey(e => e.FAuditID).HasName("PK__TAuditLo__197F1B3C7CAF028B");

            entity.ToTable("TAuditLog");

            entity.Property(e => e.FActionDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FActionType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FNewValue)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.FOldValue)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.FTableName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TCoach>(entity =>
        {
            entity.HasKey(e => e.FCoachID).HasName("PK__TCoach__1148B4EE40971706");

            entity.ToTable("TCoach");

            entity.HasIndex(e => e.FCoachCode, "UQ__TCoach__A3AA5CAA0364E66A").IsUnique();

            entity.Property(e => e.FCoachCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FCoachLevelID).HasDefaultValue((byte)1);
            entity.Property(e => e.FCoachName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FHireDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.FPhone)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.FCoachLevel).WithMany(p => p.TCoaches)
                .HasForeignKey(d => d.FCoachLevelID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TCoach_FCoachLevelID");
        });

        modelBuilder.Entity<TCoachLevel>(entity =>
        {
            entity.HasKey(e => e.FCoachLevelID).HasName("PK__TCoachLe__7B86C9F033CE434D");

            entity.ToTable("TCoachLevel");

            entity.HasIndex(e => e.FLevelName, "UQ__TCoachLe__49C0653291990F9E").IsUnique();

            entity.Property(e => e.FCoachLevelID).ValueGeneratedOnAdd();
            entity.Property(e => e.FLevelName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TCoachPrice>(entity =>
        {
            entity.HasKey(e => e.FCoachPriceID).HasName("PK__TCoachPr__B97DB75DE46E97CA");

            entity.ToTable("TCoachPrice");

            entity.Property(e => e.FCoachPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.FCoachLevel).WithMany(p => p.TCoachPrices)
                .HasForeignKey(d => d.FCoachLevelID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TCoachPrice_FCoachLevelID");
        });

        modelBuilder.Entity<TCoupon>(entity =>
        {
            entity.HasKey(e => e.FCouponID).HasName("PK__TCoupon__6E2A6162B0EBB590");

            entity.ToTable("TCoupon");

            entity.HasIndex(e => e.FCouponCode, "UQ__TCoupon__28611B7BA6AE4AD0").IsUnique();

            entity.HasIndex(e => e.FCouponName, "UQ__TCoupon__2FA8D8EDAF1296E2").IsUnique();

            entity.Property(e => e.FCouponID).ValueGeneratedOnAdd();
            entity.Property(e => e.FCouponCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FCouponName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TDepartment>(entity =>
        {
            entity.HasKey(e => e.FDepartmentID).HasName("PK__TDepartm__14C31BFF1A1AE6CE");

            entity.ToTable("TDepartment");

            entity.HasIndex(e => e.FDepartmentName, "UQ__TDepartm__3F116A88DA919457").IsUnique();

            entity.Property(e => e.FDepartmentID).ValueGeneratedOnAdd();
            entity.Property(e => e.FDepartmentName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TEmployee>(entity =>
        {
            entity.HasKey(e => e.FEmployeeID).HasName("PK__TEmploye__962AC3BA87E8A9AC");

            entity.ToTable("TEmployee");

            entity.HasIndex(e => e.FAccount, "UQ__TEmploye__0AD9B81165A10E9B").IsUnique();

            entity.Property(e => e.FAccount)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FEmployeeCode)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FFirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FHireDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.FLastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FPasswordHash)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.FPasswordSalt)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.FPermissions).HasDefaultValue((byte)1);
            entity.Property(e => e.FPhone)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FPosition)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.FDepartment).WithMany(p => p.TEmployees)
                .HasForeignKey(d => d.FDepartmentID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEmployee_FDepartmentID");
        });

        modelBuilder.Entity<TEmployeeLoginRecord>(entity =>
        {
            entity.HasKey(e => e.FLoginID).HasName("PK__TEmploye__B361E51C3301CA68");

            entity.ToTable("TEmployeeLoginRecord");

            entity.Property(e => e.FIPAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FLoginDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FLogoutDatetime).HasColumnType("datetime");

            entity.HasOne(d => d.FEmployee).WithMany(p => p.TEmployeeLoginRecords)
                .HasForeignKey(d => d.FEmployeeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TEmployeeLoginRecord_FEmployeeID");
        });

        modelBuilder.Entity<TLocation>(entity =>
        {
            entity.HasKey(e => e.FLocationID).HasName("PK__TLocatio__9F267DA6312FFB1E");

            entity.ToTable("TLocation");

            entity.HasIndex(e => e.FLocationName, "UQ__TLocatio__95B86379AC2E9ED6").IsUnique();

            entity.Property(e => e.FLocationID).ValueGeneratedOnAdd();
            entity.Property(e => e.FLocationName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TMember>(entity =>
        {
            entity.HasKey(e => e.FMemberID).HasName("PK__TMember__B073964D0E4A8A24");

            entity.ToTable("TMember");

            entity.HasIndex(e => e.FMemberCode, "UQ__TMember__884260E4D5A49AF6").IsUnique();

            entity.Property(e => e.FCountryCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FGender)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.FMemberCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FMemberName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FPermissions).HasDefaultValue((byte)1);
            entity.Property(e => e.FPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FSkiLevelID).HasDefaultValue((byte)1);

            entity.HasOne(d => d.FSkiLevel).WithMany(p => p.TMembers)
                .HasForeignKey(d => d.FSkiLevelID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMember_FSkiLevelID");
        });

        modelBuilder.Entity<TMemberLoginRecord>(entity =>
        {
            entity.HasKey(e => e.FLoginRecordID).HasName("PK__TMemberL__AC820EEFD52ECC0B");

            entity.ToTable("TMemberLoginRecord");

            entity.Property(e => e.FLoginDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FLoginIPAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FLoginTimezone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FLogoutDatetime).HasColumnType("datetime");

            entity.HasOne(d => d.FLoginType).WithMany(p => p.TMemberLoginRecords)
                .HasForeignKey(d => d.FLoginTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberLoginRecord_FLoginTypeID");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberLoginRecords)
                .HasForeignKey(d => d.FMemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberLoginRecord_FMemberID");
        });

        modelBuilder.Entity<TMemberLoginType>(entity =>
        {
            entity.HasKey(e => e.FLoginTypeID).HasName("PK__TMemberL__BA16A900E44A42B0");

            entity.ToTable("TMemberLoginType");

            entity.HasIndex(e => e.FLoginTypeName, "UQ__TMemberL__8CBAB3354E9BFDB5").IsUnique();

            entity.Property(e => e.FLoginTypeID).ValueGeneratedOnAdd();
            entity.Property(e => e.FLoginTypeName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<TMemberNon>(entity =>
        {
            entity.HasKey(e => e.FMemberNonID).HasName("PK__TMemberN__F787575DA647E99A");

            entity.ToTable("TMemberNon");

            entity.HasIndex(e => e.FEmail, "UQ__TMemberN__0F13454EE4D79FFE").IsUnique();

            entity.HasIndex(e => e.FMemberNonName, "UQ__TMemberN__6975A759E9E7274F").IsUnique();

            entity.HasIndex(e => e.FPhone, "UQ__TMemberN__E7826C3D8DD954A5").IsUnique();

            entity.Property(e => e.FCountryCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FMemberNonName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FPermissions).HasDefaultValue((byte)1);
            entity.Property(e => e.FPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TMemberReview>(entity =>
        {
            entity.HasKey(e => e.FReviewID).HasName("PK__TMemberR__FC975C42DE94750D");

            entity.ToTable("TMemberReview");

            entity.Property(e => e.FProductType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FReviewContent).HasMaxLength(200);

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberReviews)
                .HasForeignKey(d => d.FMemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberReview_FMemberID");
        });

        modelBuilder.Entity<TMemberShoppingCart>(entity =>
        {
            entity.HasKey(e => e.FShoppingCartID).HasName("PK__TMemberS__2C62D3340327F544");

            entity.ToTable("TMemberShoppingCart");

            entity.Property(e => e.FPrice).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.FProductType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FRemark).HasMaxLength(50);

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberShoppingCarts)
                .HasForeignKey(d => d.FMemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberShoppingCart_FMemberID");
        });

        modelBuilder.Entity<TMemberShoppingCartCourse>(entity =>
        {
            entity.HasKey(e => e.FShoppingCartCourseID).HasName("PK__TMemberS__21447D96EE20B554");

            entity.ToTable("TMemberShoppingCartCourse");

            entity.HasOne(d => d.FLocation).WithMany(p => p.TMemberShoppingCartCourses)
                .HasForeignKey(d => d.FLocationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberShoppingCartCourse_FLocationID");

            entity.HasOne(d => d.FShoppingCart).WithMany(p => p.TMemberShoppingCartCourses)
                .HasForeignKey(d => d.FShoppingCartID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberShoppingCartCourse_FShoppingCartCourseID");
        });

        modelBuilder.Entity<TMemberShoppingCartHomestay>(entity =>
        {
            entity.HasKey(e => e.FShoppingCartHomestayID).HasName("PK__TMemberS__6177808DE3D67A15");

            entity.ToTable("TMemberShoppingCartHomestay");

            entity.Property(e => e.FEndDatetime).HasColumnType("datetime");
            entity.Property(e => e.FStartDatetime).HasColumnType("datetime");

            entity.HasOne(d => d.FDropoffLocation).WithMany(p => p.TMemberShoppingCartHomestayFDropoffLocations)
                .HasForeignKey(d => d.FDropoffLocationID)
                .HasConstraintName("FK_TMemberShoppingCartHomestay_FDropoffLocationID");

            entity.HasOne(d => d.FPickupLocation).WithMany(p => p.TMemberShoppingCartHomestayFPickupLocations)
                .HasForeignKey(d => d.FPickupLocationID)
                .HasConstraintName("FK_TMemberShoppingCartHomestay_FPickupLocationID");

            entity.HasOne(d => d.FShoppingCart).WithMany(p => p.TMemberShoppingCartHomestays)
                .HasForeignKey(d => d.FShoppingCartID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberShoppingCartHomestay_FShoppingCartHomestayID");
        });

        modelBuilder.Entity<TMemberSkiLevel>(entity =>
        {
            entity.HasKey(e => e.FSkiLevelID).HasName("PK__TMemberS__678B7044A97C316D");

            entity.ToTable("TMemberSkiLevel");

            entity.HasIndex(e => e.FSkiLevelName, "UQ__TMemberS__4AC5D32169165C7F").IsUnique();

            entity.Property(e => e.FSkiLevelID).ValueGeneratedOnAdd();
            entity.Property(e => e.FSkiLevelName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TMemberThirdPartyAccount>(entity =>
        {
            entity.HasKey(e => e.FThirdPartyAccountID).HasName("PK__TMemberT__DFEF7BB8746B98EC");

            entity.ToTable("TMemberThirdPartyAccount");

            entity.Property(e => e.FThirdPartyUniqueID)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false);

            entity.HasOne(d => d.FLoginType).WithMany(p => p.TMemberThirdPartyAccounts)
                .HasForeignKey(d => d.FLoginTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberThirdPartyAccount_FLoginTypeID");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberThirdPartyAccounts)
                .HasForeignKey(d => d.FMemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberThirdPartyAccount_FMemberID");
        });

        modelBuilder.Entity<TMemberWebsiteAccount>(entity =>
        {
            entity.HasKey(e => e.FWebsiteAccountID).HasName("PK__TMemberW__728556ED48C0B576");

            entity.ToTable("TMemberWebsiteAccount");

            entity.HasIndex(e => e.FAccount, "UQ__TMemberW__0AD9B8119D6BB165").IsUnique();

            entity.Property(e => e.FAccount)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FPasswordHash)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.FPasswordSalt)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.FMember).WithMany(p => p.TMemberWebsiteAccounts)
                .HasForeignKey(d => d.FMemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TMemberWebsiteAccount_FMemberID");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.FOrderID).HasName("PK__TOrder__3626C70DE6CAB728");

            entity.ToTable("TOrder");

            entity.HasIndex(e => e.FOrderCode, "UQ__TOrder__B0EFADA9B1D6B8A0").IsUnique();

            entity.Property(e => e.FCreationDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FFinalAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FInitialAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FOrderCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FDiscountCoupon).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.FDiscountCouponID)
                .HasConstraintName("FK_TOrder_FDiscountCouponID");

            entity.HasOne(d => d.FMember).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.FMemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrder_FMemberID");
        });

        modelBuilder.Entity<TOrderDetail>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailID).HasName("PK__TOrderDe__14A8A40DB5D0AD47");

            entity.ToTable("TOrderDetail");

            entity.Property(e => e.FOrderDetailAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FProductType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FRemarks).HasMaxLength(100);

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderDetails)
                .HasForeignKey(d => d.FOrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderDetail_FOrderID");
        });

        modelBuilder.Entity<TOrderDetailCourse>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailCourseID).HasName("PK__TOrderDe__F5241A96F5F350AF");

            entity.ToTable("TOrderDetailCourse");

            entity.HasOne(d => d.FLocation).WithMany(p => p.TOrderDetailCourses)
                .HasForeignKey(d => d.FLocationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderDetailCourse_FLocationID");

            entity.HasOne(d => d.FOrderDetail).WithMany(p => p.TOrderDetailCourses)
                .HasForeignKey(d => d.FOrderDetailID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderDetailCourse_FOrderDetailID");
        });

        modelBuilder.Entity<TOrderDetailHomestay>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailHomestayID).HasName("PK__TOrderDe__051480D2D97411A2");

            entity.ToTable("TOrderDetailHomestay");

            entity.Property(e => e.FEndDatetime).HasColumnType("datetime");
            entity.Property(e => e.FStartDatetime).HasColumnType("datetime");

            entity.HasOne(d => d.FDropoffLocation).WithMany(p => p.TOrderDetailHomestayFDropoffLocations)
                .HasForeignKey(d => d.FDropoffLocationID)
                .HasConstraintName("FK_TOrderDetailHomestay_FDropoffLocationID");

            entity.HasOne(d => d.FOrderDetail).WithMany(p => p.TOrderDetailHomestays)
                .HasForeignKey(d => d.FOrderDetailID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderDetailHomestay_FOrderDetailID");

            entity.HasOne(d => d.FPickupLocation).WithMany(p => p.TOrderDetailHomestayFPickupLocations)
                .HasForeignKey(d => d.FPickupLocationID)
                .HasConstraintName("FK_TOrderDetailHomestay_FPickupLocationID");
        });

        modelBuilder.Entity<TOrderPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.FPaymentMethodID).HasName("PK__TOrderPa__80656CC7EC518E23");

            entity.ToTable("TOrderPaymentMethod");

            entity.HasIndex(e => e.FPaymentMethodName, "UQ__TOrderPa__80E2EE0F6140C10B").IsUnique();

            entity.Property(e => e.FPaymentMethodID).ValueGeneratedOnAdd();
            entity.Property(e => e.FPaymentMethodName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TOrderPaymentRecord>(entity =>
        {
            entity.HasKey(e => e.FPaymentRecordID).HasName("PK__TOrderPa__018D69899DB176B6");

            entity.ToTable("TOrderPaymentRecord");

            entity.Property(e => e.FCardExpiryMonth)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FCardExpiryYear)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FCardNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FCardholderName).HasMaxLength(50);
            entity.Property(e => e.FPaymentAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FPaymentDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderPaymentRecords)
                .HasForeignKey(d => d.FOrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderPaymentRecord_FOrderID");

            entity.HasOne(d => d.FPaymentMethod).WithMany(p => p.TOrderPaymentRecords)
                .HasForeignKey(d => d.FPaymentMethodID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderPaymentRecord_FPaymentMethodID");

            entity.HasOne(d => d.FPaymentStatus).WithMany(p => p.TOrderPaymentRecords)
                .HasForeignKey(d => d.FPaymentStatusID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TOrderPaymentRecord_FPaymentStatusID");
        });

        modelBuilder.Entity<TOrderPaymentStatus>(entity =>
        {
            entity.HasKey(e => e.FPaymentStatusID).HasName("PK__TOrderPa__5005B11E6EF538D9");

            entity.ToTable("TOrderPaymentStatus");

            entity.HasIndex(e => e.FPaymentStatusName, "UQ__TOrderPa__8307996DED135A4D").IsUnique();

            entity.Property(e => e.FPaymentStatusID).ValueGeneratedOnAdd();
            entity.Property(e => e.FPaymentStatusName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TProductCourse>(entity =>
        {
            entity.HasKey(e => e.FCourseID).HasName("PK__TProduct__1D9D494333660744");

            entity.ToTable("TProductCourse");

            entity.HasIndex(e => e.FCourseName, "UQ__TProduct__079E2CA2FEEA7FE8").IsUnique();

            entity.HasIndex(e => e.FCourseCode, "UQ__TProduct__1A0EFA3A2B78A3ED").IsUnique();

            entity.Property(e => e.FCourseCode)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FCourseName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TProductCoursePrice>(entity =>
        {
            entity.HasKey(e => e.FCoursePriceID).HasName("PK__TProduct__934B9062A65DB79D");

            entity.ToTable("TProductCoursePrice");

            entity.Property(e => e.FCourseCombo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FCoursePrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.FCourse).WithMany(p => p.TProductCoursePrices)
                .HasForeignKey(d => d.FCourseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductCoursePrice_FCourseID");
        });

        modelBuilder.Entity<TProductEquipment>(entity =>
        {
            entity.HasKey(e => e.FEquipmentID).HasName("PK__TProduct__86C84E8E1A1B2363");

            entity.ToTable("TProductEquipment");

            entity.HasIndex(e => e.FEquipmentName, "UQ__TProduct__3BA5D073C48D3A75").IsUnique();

            entity.HasIndex(e => e.FEquipmentCode, "UQ__TProduct__5A815F971006D5BA").IsUnique();

            entity.Property(e => e.FDescription).HasMaxLength(200);
            entity.Property(e => e.FEquipmentCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FEquipmentName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FEquipmentPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FRemarks).HasMaxLength(200);

            entity.HasOne(d => d.FEquipmentCategory).WithMany(p => p.TProductEquipments)
                .HasForeignKey(d => d.FEquipmentCategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductEquipment_FEquipmentCategoryID");

            entity.HasOne(d => d.FVendor).WithMany(p => p.TProductEquipments)
                .HasForeignKey(d => d.FVendorID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductEquipment_FVendorID");
        });

        modelBuilder.Entity<TProductEquipmentCategory>(entity =>
        {
            entity.HasKey(e => e.FEquipmentCategoryID).HasName("PK__TProduct__137C2983ED1098BF");

            entity.ToTable("TProductEquipmentCategory");

            entity.HasIndex(e => e.FEquipmentCategoryName, "UQ__TProduct__7079F1AFF438B927").IsUnique();

            entity.Property(e => e.FEquipmentCategoryID).ValueGeneratedOnAdd();
            entity.Property(e => e.FEquipmentCategoryName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TProductEvent>(entity =>
        {
            entity.HasKey(e => e.FEventID).HasName("PK__TProduct__CA10A6C73EAA42C4");

            entity.ToTable("TProductEvent");

            entity.HasIndex(e => e.FEventCode, "UQ__TProduct__5A91C1C3EABAE0CB").IsUnique();

            entity.HasIndex(e => e.FEventName, "UQ__TProduct__EA4B2CD57C12727B").IsUnique();

            entity.Property(e => e.FEndDatetime).HasColumnType("datetime");
            entity.Property(e => e.FEventCode)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FEventName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FEventPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FStartDatetime).HasColumnType("datetime");

            entity.HasOne(d => d.FVendor).WithMany(p => p.TProductEvents)
                .HasForeignKey(d => d.FVendorID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductEvent_FVendorID");
        });

        modelBuilder.Entity<TProductHomestay>(entity =>
        {
            entity.HasKey(e => e.FHomestayID).HasName("PK__TProduct__57F441BD117DD412");

            entity.ToTable("TProductHomestay");

            entity.HasIndex(e => e.FHomestayCode, "UQ__TProduct__3764D0365B2CF18B").IsUnique();

            entity.HasIndex(e => e.FHomestayName, "UQ__TProduct__9993567B6503E68C").IsUnique();

            entity.Property(e => e.FDescription).HasMaxLength(200);
            entity.Property(e => e.FHomestayCode)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FHomestayName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.FAddress).WithMany(p => p.TProductHomestays)
                .HasForeignKey(d => d.FAddressID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductHomestay_FAddressID");
        });

        modelBuilder.Entity<TProductHomestayPrice>(entity =>
        {
            entity.HasKey(e => e.FHomestayPriceID).HasName("PK__TProduct__540DBCD1AEA51C5F");

            entity.ToTable("TProductHomestayPrice");

            entity.Property(e => e.FStayPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.FHomestayRoom).WithMany(p => p.TProductHomestayPrices)
                .HasForeignKey(d => d.FHomestayRoomID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductHomestayPrice_FHomestayRoomID");
        });

        modelBuilder.Entity<TProductHomestayRoom>(entity =>
        {
            entity.HasKey(e => e.FHomestayRoomID).HasName("PK__TProduct__A7A24B1DE9564DA7");

            entity.ToTable("TProductHomestayRoom");

            entity.Property(e => e.FLastCleanDatetime).HasColumnType("datetime");
            entity.Property(e => e.FMaxCapacity)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.FRoomCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FHomestay).WithMany(p => p.TProductHomestayRooms)
                .HasForeignKey(d => d.FHomestayID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductHomestayRoom_FHomestayID");
        });

        modelBuilder.Entity<TProductImage>(entity =>
        {
            entity.HasKey(e => e.FProductImageID).HasName("PK__TProduct__E8FC480FE733B037");

            entity.ToTable("TProductImage");

            entity.Property(e => e.FImage)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FProductType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TProductShuttle>(entity =>
        {
            entity.HasKey(e => e.FShuttleID).HasName("PK__TProduct__88F568B5F6877FEE");

            entity.ToTable("TProductShuttle");

            entity.HasIndex(e => e.FShuttleCode, "UQ__TProduct__973B70ED634D39A0").IsUnique();

            entity.HasIndex(e => e.FShuttleName, "UQ__TProduct__BE0FB700E7ABD6A4").IsUnique();

            entity.Property(e => e.FShuttleID).ValueGeneratedOnAdd();
            entity.Property(e => e.FShuttleCode)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FShuttleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TProductShuttlePrice>(entity =>
        {
            entity.HasKey(e => e.FShuttlePriceID).HasName("PK__TProduct__F7E7513B9337A362");

            entity.ToTable("TProductShuttlePrice");

            entity.Property(e => e.FShuttlePrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.FDropoffLocation).WithMany(p => p.TProductShuttlePriceFDropoffLocations)
                .HasForeignKey(d => d.FDropoffLocationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductShuttlePrice_FDropoffLocationID");

            entity.HasOne(d => d.FPickupLocation).WithMany(p => p.TProductShuttlePriceFPickupLocations)
                .HasForeignKey(d => d.FPickupLocationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductShuttlePrice_FPickupLocationID");

            entity.HasOne(d => d.FShuttle).WithMany(p => p.TProductShuttlePrices)
                .HasForeignKey(d => d.FShuttleID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductShuttlePrice_FShuttleID");
        });

        modelBuilder.Entity<TProductStorage>(entity =>
        {
            entity.HasKey(e => e.FStorageID).HasName("PK__TProduct__B9658B7394FB9662");

            entity.ToTable("TProductStorage");

            entity.Property(e => e.FStoragePrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.FEquipmentCategory).WithMany(p => p.TProductStorages)
                .HasForeignKey(d => d.FEquipmentCategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductStorage_FEquipmentCategoryID");
        });

        modelBuilder.Entity<TProductTagMapping>(entity =>
        {
            entity.HasKey(e => e.FProductTagMappingID).HasName("PK__TProduct__45FC8304ED94CF5E");

            entity.ToTable("TProductTagMapping");

            entity.Property(e => e.FProductCode)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.FProductType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FTag).WithMany(p => p.TProductTagMappings)
                .HasForeignKey(d => d.FTagID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TProductTagMapping_FTagID");
        });

        modelBuilder.Entity<TTag>(entity =>
        {
            entity.HasKey(e => e.FTagID).HasName("PK__TTag__71B84AE8EC113197");

            entity.ToTable("TTag");

            entity.HasIndex(e => e.FTagName, "UQ__TTag__C67CECC89622C543").IsUnique();

            entity.Property(e => e.FTagName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.FTagType).WithMany(p => p.TTags)
                .HasForeignKey(d => d.FTagTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTag_FTagTypeID");
        });

        modelBuilder.Entity<TTagType>(entity =>
        {
            entity.HasKey(e => e.FTagTypeID).HasName("PK__TTagType__3AB41B08DD6BA400");

            entity.ToTable("TTagType");

            entity.HasIndex(e => e.FTypeName, "UQ__TTagType__87038ABF41E91EAD").IsUnique();

            entity.Property(e => e.FTagTypeID).ValueGeneratedOnAdd();
            entity.Property(e => e.FTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TVendor>(entity =>
        {
            entity.HasKey(e => e.FVendorID).HasName("PK__TVendor__B25FAD58EAAD2A8A");

            entity.ToTable("TVendor");

            entity.HasIndex(e => e.FVendorCode, "UQ__TVendor__193DB25CB0586CC6").IsUnique();

            entity.HasIndex(e => e.FContactPhone, "UQ__TVendor__9CEA5F4964D1E921").IsUnique();

            entity.Property(e => e.FVendorID).ValueGeneratedOnAdd();
            entity.Property(e => e.FContactName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.FContactPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FIsContact).HasDefaultValue(true);
            entity.Property(e => e.FVendorCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FVendorName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}